************************ libm support in kernel space ************************
Text to be improved

This is a rework of Dave's (David Schleef) idea of making available libm
in kernel space as a module exporting a subset of its functions.
Such a rework is due to a few reasons. Among them one is the need 
to avoid user space headers, whic may require a distribution proper 
special include path; another one is that the previous implementation 
used a few source files with a dubious free software license. 
So it has been decided to have something different and completely self 
contained within RTAI. 

In such a view our new make machinery currently does not care of importing 
and compiling the needed math functions into RTAI. Instead, it statically 
links an existing libm.a library into an RTAI module, without the need of 
compiling anything but a wrapper module, containing appropriate symbol 
exports and a few functions missed at the linking. Moreover it now correctly 
handles errno (kerrno in RTAI), which was not exploited in a thread safe way 
in the previous RTAI implementation.

The idea is simple and under i386 has proven itself valid simply by using 
glibc-libm.a directly.

Unfortunately it did not work for x86_64, because glibc libm.a is not 
compiled with the option "-mcmodel=kernel", required for a kernel module.
Recompiling x86_64 glibc-libm.a with such an option would entail 
patching its configure-make scripts. As a matter of fact, glibc configure 
script forces also the use of "-fPIC" in some of his tests, regardless 
of the the fact that CFLAGS-LDFLAGS contain "-mcmodel=kernel". That results 
in the two compiler options "-fPIC" and "-mcmodel=kernel" being incompatible. 
Moreover a fresh recompilation of glibc is not a light task. So it has been 
decided to resort to something else.

Such a chosen else is basically to resort to a few known and lighter embeddable 
libraries NEWLIB-libm.a, uClib-libm.a, MUSL-libm.a and, as said, glibc-libm.a 
for 32 bits archs. After all working in kernel space is somewhat similar to
an application embedding.
At the moment uClib has been tested for 32 bits only, for which any of 
glibc-libm.a, newlib-libm.a, uClib-libm.a and musl-libm.a can be used.

As said, recall that on x86_64 you need to set CFLAGS so to impose the compilation 
option "-mcmodel=kernel". For this reason, you also need to disable the 
building of a shared library, which requires -fPIC also, and build a static 
libm.a. 
Within NEWLIB it means that you have to configure it with -disable-shared,
without any problem with -fPIC, since it not forced in any part of its
native configure-making. 
MUSL, instead, forces the -fPIC in its Makefile. Therefore, beside forcing 
-disable-shared at configuring, requires a simple editing of its Makefile,
as explained further on, along with some editing fwrite.c gto avoid its 
redifinition at the static linking of the module rtai_math.ko.
uClib will likely be configured through menuconfig and -fPIC can be cancelled
under the "disable PIC" menu, while -disable-shared is set through 
"enable static making".
Note also that if you want, for whatever reason, build a 32-bit libm on 
an x86_64, you must appropriately set the host platform, --host=xxxxx, 
possibly along the target platform, --target=xxxxx, in case of a cross making.

The new implementation provides also an extension to both the double/float version 
of most of the libm functions, which should be of help in enhancing the possibility
of setting up complex numerical applications in kernel space.

A further extension, which can be selected at configure time, provides a new 
support for complex functions in kernel space. It has required a simplified
coding of a few missing links more, related to double and float complex 
multiply and divide, but a more serious implementation is also available. 
The latter is taken from the LLVM compiler infrastructure, which is released 
under the permissive free(dom) dual MIT and University of Illinois Open 
Source Licenses.

Also available are a couple of functions helpers, to print double and 
floating point numbers in kernel space, i.e.:
- char *d2str(double d, int dgt, char *str), to convert a double to a string,
float types have to use it too;
- char *cd2str(complex double d, int dgt, char *str), to convert a double 
complex to a string, in the form "real + j*imag", float complex types have 
to use it too.
They should be useful for quick checks and debugging. 
As such they are based on a somewhat naive implementation, whereas numbers 
are formatted only as: +/-0.xxxxxxe+yy, where the number of "x"es is equal 
to the number set for the argument "dgt" used in calling any of them.

Summing up (host=xxxx are just reminders you must set appropriately):
* 32 bits archs can use:
- glibc-libm.a as it is;
- newlib with, e.g: ./configure --prefix=/myinstalldir --disable-shared --disable-multilib --host=i386-pc-sysv,
  make; see its README for more;
- uClibc with: make menuconfig, disable PIC, enable static making; 
  multithreads and C99 support, make.
- MUSL, requires to execute the following script lines, from within it base directory,
  before its configure-make:
  sed 's/-fPIC//' <Makefile >Makefile.tmp; mv Makefile.tmp Makefile
  sed -e 's/fwrite(/Fwrite(/' -e 's/(fwrite/(Fwrite/' <src/stdio/fwrite.c >fwrite.c.tmp; mv fwrite.c.tmp src/stdio/fwrite.c
  That done:
  ./configure --prefix=/myinstalldir --disable-shared --host=i386 CFLAGS="-fno-common", 
  make,
  cp lib/libc.a lib/libm.a. See its README-INSTALL for more.

* 64 bits archs can use:
- no glibc-libm.a, unless you are willing to patch its making;
- newlib with, e.g: ./configure --prefix=/myinstalldir --disable-shared --disable-multilib --host=x86_64-pc-none CFLAGS="-mcmodel=kernel",
  make; see its README for more;
- uClibc with: make menuconfig, disable PIC, enable static making;
  multithreads and C99 support, make.
- MUSL, requires to execute the following script lines, from within it base directory,
  before its configure-make:
  sed 's/-fPIC//' <Makefile >Makefile.tmp; mv Makefile.tmp Makefile
  sed -e 's/fwrite(/Fwrite(/' -e 's/(fwrite/(Fwrite/'<src/stdio/fwrite.c >fwrite.c.tmp; mv fwrite.c.tmp src/stdio/fwrite.c
  That done:
  ./configure --prefix=/myinstalldir --disable-shared --host=x86_64 CFLAGS="-mcmodel=kernel -fno-common", 
  make,
  cp lib/libc.a lib/libm.a. See its README-INSTALL for more.

Libraries home site:
- http://sourceware.org/newlib/
- http://www.uclibc.org/
- http://www.musl-libc.org/
- http://www.gnu.org/software/libc/

Marco Morandini and Paolo Mantegazza.
