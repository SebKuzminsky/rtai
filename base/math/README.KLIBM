************************ Libm support in kernel space ************************

This is a rework of Dave's (David Schleef) idea of making available libm 
in kernel space as a module exporting a subset of its functions.
Such a rework is due to a few reasons. Among them one is the need 
to avoid user space headers that may require a distribution proper 
special include path; another one is that the previous implementation 
used a few source files with a dubious license. 
So it has been decided to have something different and completely self 
contained within RTAI. 

In such a view our new make machinery currently does not care of importing 
and compiling the needed math functions into RTAI. Instead, it statically 
links an existing libm.a library into an RTAI module, without the need of 
compiling anything but a wrapper module, containing appropriate symbol 
exports and a few missing links. Moreover it now correctly handles errno 
(kerrno in RTAI), which was not exploited in a thread safe way in the
previous RTAI implementation.

The idea is simple and under i386 has proven valid by simply using 
glibc-libm.a directly.

Unfortunately it did not work for x86_64, because glibc's libm.a 
is not compiled with the option "-mcmodel=kernel", required for a 
kernel module.
Recompiling x86_64 glibc-libm.a with such an option would entail 
patching its configure script. As a matter of fact, glibc's configure 
script forces the use of "-fPIC" in some of his tests, regardless 
of the value of the (re)settable CFLAGS and LDFLAGS. That results in the
two options "-fPIC" and -mcmodel=kernel" being incompatible, so we decided 
to resort to something else.

Such a chosen else is basically NEWLIB-libm.a, but it should also be 
possible to use uClib-libm.a and, of course, glibc-libm.a on i386. 
At the moment uClib has been tested for 32 bits only, for which any of 
glibc-libm.a, newlib-libm.a and uClib-libm.a can be used.

Note that on x86_64 you need to set CFLAGS so to impose the compilation 
option "-mcmodel=kernel". For this reason, you also need to disable the 
building of a shared library (that would require -fPIC), and build a static 
libm.a. 
Within NEWLIB it means that you have to configure it with -disable-shared.
Note also that if you want, for whatever reason, build a 32-bit libm on 
an x86_64, you must appropriately set the host platform, --host=xxxxx, 
possibly along the target platform, --target=xxxxx, in case of a cross making.

The new implementation provides an extension to the float version of libm 
functions, which should be of help in enhancing the performances of 32 bits 
applications.

A further extension, which can be selected at configure time, provides a new 
support for complex functions in kernel space. It has required a simplified
coding of a few missing links more, related to double and float complex 
multiply and divide, but a more serious implementation is also available. 
The latter is taken from the LLVM compiler infrastructure, which is released 
under the permissive free(dom) dual MIT and University of Illinois Open 
Source Licenses.

Also available are a couple of functions helpers, to print double and 
floating point numbers in kernel space, i.e.:
- char *d2str(double d, int dgt, char *str), to convert a double to a string,
float types have to use it too;
- char *cd2str(complex double d, int dgt, char *str), to convert a double 
complex to a string, in the form "real + j*imag", float complex types have 
to use it too.
They should be useful for quick checks and debugging. 
As such they are based on a somewhat naive implementation, whereas numbers 
are formatted only as: +/-0.xxxxxxe+yy, where the number of "x"es is equal 
to the number set for the argument "dgt" used in calling any of them.

Summing up:
* i386 can use:
- glibc-libm.a as it is;
- newlib with, e.g: ./configure --prefix=/myinstalldir --disable-shared 
--host=i386-pc-sysv CFLAGS="-O2", make; see its README for more;
- uClibc with: make menuconfig, disable PIC, enable static making; 
  multithreads and C99 support, make.

* x86_64 can use:
- no glibc-libm.a, unless you are willing to patch its making;
- newlib with, e.g: ./configure --prefix=/myinstalldir --disable-shared 
  --host=x86_64-pc-none CFLAGS="-O2 -mcmodel=kernel",
- uClibc with: make menuconfig, disable PIC, enable static making;
  multithreads and C99 support, make.

Libraries home site:
- http://sourceware.org/newlib/
- http://www.uclibc.org/
- http://www.gnu.org/software/libc/

Marco Morandini and Paolo Mantegazza.
